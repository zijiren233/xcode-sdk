name: SDK

on:
  workflow_call:
    outputs:
      SDK_VERSIONS:
        description: 'List of SDK versions'
        value: ${{ jobs.collect_sdks.outputs.SDK_VERSIONS }}

jobs:
  package_sdk:
    name: Package SDK
    strategy:
      fail-fast: false
      matrix:
        macos_versions:
          - 12
          - 13
          - 14
          - 15
    runs-on: macos-${{ matrix.macos_versions }}
    steps:
      - uses: actions/checkout@v4

      - name: SDK Package
        run: |
          xcode-select -p
          xcodebuild -version
          xcodebuild -showsdks
          ls /Applications | grep -E '^Xcode_[0-9]+(\.[0-9]+)*\.app$' | sort -rV
          for xcode in $(ls /Applications | grep -E '^Xcode_[0-9]+(\.[0-9]+)*\.app$' | sort -rV); do
            platforms_dir="/Applications/$xcode/Contents/Developer/Platforms"
            for platform in $(ls "$platforms_dir"); do
              platform_name="${platform%.platform}"
              # skip existing sdk
              sed 's|for SDK in $SDKS; do|for SDK in $SDKS; do\n[ -f "$WDIR/$SDK$SDK_EXT" ] \&\& continue|g' gen_sdk_package.sh | \
              XCODEDIR=/Applications/$xcode SDK_COMPRESSOR=xz bash -s -- $platform_name
            done
          done
          mkdir -p sdk-${{ matrix.macos_versions }}
          mv *.sdk.tar.xz sdk-${{ matrix.macos_versions }}

      - name: Upload SDK
        id: upload_sdk
        uses: actions/upload-artifact@v4
        with:
          name: sdk-${{ matrix.macos_versions }}
          path: sdk-${{ matrix.macos_versions }}
          compression-level: 0

  collect_sdks:
    name: Collect SDKs
    runs-on: ubuntu-latest
    needs: package_sdk
    outputs:
      SDK_VERSIONS: ${{ steps.get_all_sdk_versions.outputs.result }}
    steps:
      - name: Collect SDK
        id: collect_sdk
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            execSync('npm install @actions/artifact');
            const { DefaultArtifactClient } = require('@actions/artifact');
            const artifact = new DefaultArtifactClient();
            const fs = require('fs');

            const allArtifacts = await artifact.listArtifacts();
            const sdkArtifacts = allArtifacts.artifacts.filter(a => a.name.startsWith('sdk-'));
            for (const sdkArtifact of sdkArtifacts) {
              console.log('download', sdkArtifact);
              await artifact.downloadArtifact(sdkArtifact.id, {
                path: sdkArtifact.name
              });
            }

            const sdkFolders = fs.readdirSync('.').filter(folder => folder.startsWith('sdk-'));
            for (const folder of sdkFolders) {
              const sdkFiles = fs.readdirSync(folder).filter(file => file.endsWith('.sdk.tar.xz'));
              for (const file of sdkFiles) {
                const sourcePath = `${folder}/${file}`;
                console.log(`collect ${sourcePath}`);
                fs.renameSync(sourcePath, file);
              }
            }

            const files = fs.readdirSync('.');
            for (const file of files) {
              if (!file.endsWith('.sdk.tar.xz')) {
                continue;
              }
              const name = file.replace(/\.sdk\.tar\.xz$/, '').replace('.', '-');

              const maxRetries = 3;
              let retries = 0;
              let success = false;

              while (retries < maxRetries && !success) {
                try {
                  await artifact.uploadArtifact(
                    name,
                    [file],
                    '.',
                    {
                      compressionLevel: 0
                    }
                  );
                  success = true;
                } catch (error) {
                  console.error(`upload ${name} failed, retry ${retries + 1}, error: ${error.message}`);
                  retries++;
                  if (retries < maxRetries) {
                    try {
                      await artifact.deleteArtifact(name);
                    } catch (deleteError) {}
                  }
                }
              }

              if (!success) {
                throw new Error(`upload ${name} failed`);
              }
            }

      - name: Get all SDK Versions
        id: get_all_sdk_versions
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            execSync('npm install @actions/artifact')
            const { DefaultArtifactClient } = require('@actions/artifact');
            const artifact = new DefaultArtifactClient();
            const sdks = await artifact.listArtifacts();
            const sdk_versions = sdks.artifacts.map(sdk => sdk.name).filter(name => name.startsWith('iPhone'));
            return sdk_versions;
